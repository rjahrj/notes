@document.meta
  title: vars
  description: 
  author: rj
  categories: 
  created: 2021-09-29
  version: 0.1
@end

* Intro
  - A value that can be changed by a program dring execution is called a variable
  - `var name type`
  @code go
    package main
    import "fmt"
  
    func main(){
      var number int //Declare an int var
      fmt.Println(number) // Print its value : 0
      var decision bool //Declare boolean
      fmt.Println(decision) // Print its value : false
    }
  @end
  - Naming is camelCasing, unless exported then it needs to be in caps

* Assigning Values
  - Assignment is give using the = sign
  - `var name type = value`
  @code go
    package main
    import "fmt"
  
    func main(){
      var number int = 5 //Declare and init int number with value 5
      fmt.Println(number) // Prints 5 to the console
      var decision bool = true //Declare and init dicision bool as true
      fmt.Println(decision) // Print true to console
  
      number := 5 // Shorthand to declare and init a var
      decision := true // Same can be done with other data types
  
      // The shorthand syntax can only be used inside functions
  @end

* Scope of Variables
 ** Global Scope
  -- Any variable that is declared outside of any function.
  Also known as package scope because it can be used by any source file
  in the package
 ** Local Scope
  -- Variables declared inside a function. They are only known inside the
  function; same for parameters and `return` variables of a function
  ---
@code go
package main
import "fmt"

var number int = 5 //Global Scope

func main(){
  var dec bool = true //Local Scope
  fmt.Println("Original Value of number: ", number) //Prints 5
  number = 10 //Reassigned number 
  fmt.Println("New Value of number: ", number) //Prints 10
  fmt.Println("Bool is: ", dec)
@end
  - An identifier declared in a block may be redeclared in an inner block, but
then the redeclared variable takes priority and shadows the outer variable 
with the same name

